{"version":3,"file":"audio_worker.bundle.js","mappings":"mBAkBO,MAAMA,UAA4BC,sBAGrCC,cACIC,QAHI,KAAAC,QAA0B,GAI9BC,QAAQC,KAAK,mCACbC,KAAKC,KAAKC,UAAaC,IACnBH,KAAKH,QAAQO,KAAKD,EAAGE,MACjBL,KAAKH,QAAQS,OAAS,KACtBN,KAAKH,QAAQU,O,CAGzB,CAEWC,kCACP,MAAO,EACX,CAEAC,QAAQC,EAA8BC,EAA8BC,GAChE,MAAMC,EAASb,KAAKH,QAAQU,QACtBO,EAASH,EAAW,GAC1B,GAAIE,EACA,IAAK,IAAIE,EAAM,EAAGA,EAAMF,EAAOP,OAAQS,IACnCD,EAAO,GAAGC,GAAOF,EAAOE,GAKhC,OAAO,CACX,EAGJC,kBAAkB,eAAgBvB,E","sources":["webpack://apple2js/./js/ui/audio_worker.ts"],"sourcesContent":["declare global {\n    interface AudioWorkletProcessor {\n        readonly port: MessagePort;\n        process(inputs: Float32Array[][], outputs: Float32Array[][], parameters: Map<string, Float32Array>): void;\n    }\n\n    const AudioWorkletProcessor: {\n        prototype: AudioWorkletProcessor;\n        new(options?: AudioWorkletNodeOptions): AudioWorkletProcessor;\n    };\n\n    function registerProcessor(name: string, ctor :{ new(): AudioWorkletProcessor }): void;\n}\n\nexport interface AppleAudioMessageEvent extends MessageEvent {\n    data: Float32Array;\n}\n\nexport class AppleAudioProcessor extends AudioWorkletProcessor {\n    private samples: Float32Array[] = [];\n\n    constructor() {\n        super();\n        console.info('AppleAudioProcessor constructor');\n        this.port.onmessage = (ev: AppleAudioMessageEvent) => {\n            this.samples.push(ev.data);\n            if (this.samples.length > 256) {\n                this.samples.shift();\n            }\n        };\n    }\n\n    static get parameterDescriptors() {\n        return [];\n    }\n\n    process(_inputList: Float32Array[][], outputList: Float32Array[][], _parameters: Map<string, Float32Array>) {\n        const sample = this.samples.shift();\n        const output = outputList[0];\n        if (sample) {\n            for (let idx = 0; idx < sample.length; idx++) {\n                output[0][idx] = sample[idx];\n            }\n        }\n\n        // Keep alive indefinitely.\n        return true;\n    }\n}\n\nregisterProcessor('audio_worker', AppleAudioProcessor);\n"],"names":["AppleAudioProcessor","AudioWorkletProcessor","constructor","super","samples","console","info","this","port","onmessage","ev","push","data","length","shift","parameterDescriptors","process","_inputList","outputList","_parameters","sample","output","idx","registerProcessor"],"sourceRoot":""}